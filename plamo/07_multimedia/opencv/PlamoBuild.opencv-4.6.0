#!/bin/sh
##############################################################
pkgbase='opencv'
vers="4.6.0"
url="https://github.com/opencv/opencv/archive/${vers}/opencv-${vers}.tar.gz"
contrib_url="https://github.com/opencv/opencv_contrib/archive/${vers}/opencv_contrib-${vers}.tar.gz"
digest="md5sum:2f52df67b255fcc2c36632a9e9f723f6"
verify=""
arch=`uname -m`
build=B1
src="${pkgbase}-${vers}"
OPT_CONFIG="-DCMAKE_BUILD_TYPE=Release -DENABLE_CXX11=ON -DBUILD_PERF_TESTS=OFF -DWITH_XINE=ON
	    -DBUILD_TESTS=OFF -DENABLE_PRECOMPILED_HEADERS=OFF -DCMAKE_SKIP_RPATH=ON
	    -DBUILD_WITH_DEBUG_INFO=OFF -Wno-dev"
DOCS='LICENSE README.md'
patchfiles=''
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

#OPT_CONFIG="$OPT_CONFIG  -DOPENCV_EXTRA_MODULES_PATH=$W/opencv_contrib-${vers}/modules"

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
  if [ ! -f ${contrib_url##*/} ]; then
      wget $contrib_url
  fi
  tar xvf ${contrib_url##*/}
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#   patch apply to source tree but make at out of source tree
######################################################################
  cd $S
  for patch in $patchfiles ; do
    if [ -f .${patch} ]; then
      patch -p1 < $W/$patch
      touch .${patch}
    fi
  done
  sed -e '/\/avformat.h/i #include <libavcodec/version.h>' \
          -i modules/videoio/src/ffmpeg_codecs.hpp
  cd $B
  export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
  export LDFLAGS='-Wl,--as-needed' 
  cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ${OPT_CONFIG} $S
  
  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make -j3
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
