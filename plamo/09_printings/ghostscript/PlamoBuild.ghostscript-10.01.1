#!/bin/sh
##############################################################
pkgbase='ghostscript'
vers="10.01.1"
GS_DOT_VERSION="10.01.1"
url="https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs1011/ghostscript-10.01.1.tar.xz"
digest=""
fonturl="https://downloads.sourceforge.net/gs-fonts/ghostscript-fonts-std-8.11.tar.bz2"
verify="md5sum:9e2d94ab40c4580d04b3221c3f78934a"
arch=`uname -m`
build=B1
src="ghostscript-${vers}"
OPT_CONFIG="--enable-dynamic
	--without-pcl
	--with-ijs
        --with-x
	--with-drivers=ALL
	--enable-fontconfig
	--enable-freetype
	--enable-openjpeg
        --enable-cups
	--with-system-libtiff
	--with-libpaper
	--disable-compile-inits"
fontpath="/usr/share/ghostscript/fonts
	/usr/share/fonts
        /usr/share/fonts/TTF
	/usr/share/poppler/cMap/"
DOCS='LICENSE'
patchfiles="0002_ghostscript-10.01.1-pdfwrite-Substituted-TTF-CIDFont-CID-hand.patch"
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
  for f in $fonturl
  do
    if [ ! -f ${f##*/} ]; then
      wget $f
    fi
  done
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; cp -a $S $B
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
  cd $B
  for patch in $patchfiles ; do
    patch -p1 < $W/$patch
  done

  # Remove unmaintained garbage:
    rm -rf freetype jpeg lcms2 libpng libtiff png tiff zlib
 
  autoreconf --force --install
  ( cd jbig2dec ; autoreconf --force --install )
  ( cd ijs ; autoreconf --force --install )
  # fontpath
  fp=
  for p in $fontpath
  do
      fp=${fp}:$p
  done
  fp=${fp/:/}

  export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
  export LDFLAGS='-Wl,--as-needed' 
  ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG} \
	      --with-fontpath="$fp"
    
  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make
  make so
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install-gs DESTDIR=$P
  make install-so-gs DESTDIR=$P

  # replace statically linked gs binary with symlink to dynamically linked gsc
  rm -v $P/usr/bin/gs
  ln -s gsc $P/usr/bin/gs

  # Don't ship .la files:
  pushd $P
    for lafile in usr/lib/*.la ; do
      rm -f ${lafile} /${lafile}
    done
  popd

  # copy examples to /usr/share/ghostscript/${GS_DOT_VERSION}/
  cp -a $S/examples $P/usr/share/ghostscript/${GS_DOT_VERSION}/

  # remove man of de
  rm -rfv $P/usr/share/man/de

  # header
  install -v -m644 base/*.h $P/usr/include/ghostscript
  ln -v -s ghostscript $P/usr/include/ps

  # install cidfmap
  # install -v -m644 -D $W/cidfmap $P/usr/share/ghostscript/${vers}/Resource/Init/cidfmap

  cat <<"EOF" >> $P/usr/share/ghostscript/${GS_DOT_VERSION}/Resource/Init/cidfmap
/ipag 	 << /FileType /TrueType /Path (/usr/share/fonts/TTF/ipag.ttf) 	/SubfontID 0 /CSI [ (Japan1) 6 ] >> ;
/ipagp 	 << /FileType /TrueType /Path (/usr/share/fonts/TTF/ipagp.ttf) 	/SubfontID 0 /CSI [ (Japan1) 6 ] >> ;
/ipam	 << /FileType /TrueType /Path (/usr/share/fonts/TTF/ipam.ttf) 	/SubfontID 0 /CSI [ (Japan1) 6 ] >> ;
/ipamp	 << /FileType /TrueType /Path (/usr/share/fonts/TTF/ipamp.ttf) 	/SubfontID 0 /CSI [ (Japan1) 6 ] >> ;
/Ryumin-Light		/ipam ;
/Ryumin-Medium		/ipam ;
/GothicBBB-Medium	/ipag ;
/ChuGothicBBB-Medium	/GothicBBB-Medium	;
/ChuGothicBBB-Medium-Mono	/MS-Gothic	;
/FutoGoB101-Bold	/GothicBBB-Medium	;
/FutoMinA101-Bold	/Ryumin-Light		;
/GothicMB101-Bold	/GothicBBB-Medium	;
/GothicMB101-hea	/GothicBBB-Medium	;
/GothicMB101-Ult	/GothicBBB-Medium	;
/ShinGo-Bold		/GothicBBB-Medium	;
/ShinGo-Medium		/GothicBBB-Medium	;
/ShinGo-regular		/GothicBBB-Medium	;
/MS-Gothic		/ipag			;
/MS-PGothic		/ipagp			;
/MSPGothic		/ipagp			;
/MSMincho		/ipam			;
/MS-Mincho		/ipam			;
/MS-PMincho		/ipamp			;
/MSPMincho		/ipamp			;
/HeiseiMin-W3		/Ryumin-Light		;
/HeiseiKakuGo-W5 	/GothicBBB-Medium	;
/Kochi-Mincho      	/Ryumin-Light		;
/Kochi-Gothic      	/GothicBBB-Medium	;
/WadaMin-Regular	/ipam			;
/WadaMin-RegularH	/ipam			;
/WadaMin-Bold		/ipam			;
/WadaGo-Regular		/ipag			;
/WadaGo-RegularH        /ipag                   ;
/WadaGo-Bold		/ipag			;
/Adobe-Japan1      	/Ryumin-Light		;
/Adobe-Japan2      	/Ryumin-Light		;
EOF

  # install std_font
  for f in $fonturl
  do
    tar xvf $W/${f##*/} --no-same-owner -C $P/usr/share/ghostscript/
  done

  # link to /usr/share/fonts
  mkdir -p $P/usr/share/fonts
  ln -sfv ../ghostscript/fonts $P/usr/share/fonts/gsfonts

  mkdir -p $P/install
  cat <<EOF >> $P/install/initpkg
if [ -x /usr/bin/fc-cache ]; then
  /usr/bin/fc-cache -v 
fi
EOF

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

  # move doc dir
  mv -v $P/usr/share/doc/ghostscript/${vers}/* $docdir/$src/
  rm -rfv $docdir/ghostscript

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
