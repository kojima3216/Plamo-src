#!/bin/sh
##############################################################
pkgbase='emacs'
vers='28.1'
url="http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-${vers}.tar.xz"
verify="${url}.sig"
arch=`uname -m`
build=B1
src="${pkgbase}-${vers}"
OPT_CONFIG='--without-all --without-x'
DOCS='COPYING ChangeLog ChangeLog.1 ChangeLog.2 INSTALL README'
patchfiles='emacs-28.1-add-compresstype.patch'
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
  cd $S
  for patch in $patchfiles ; do
    if [ ! -f .${patch} ]; then
      patch -p1 < $W/$patch
      touch .${patch}
    fi
  done
  # if [ -f autogen.sh ] ; then
  #   sh ./autogen.sh
  # fi

  cd $B
  export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
  export LDFLAGS='-Wl,--as-needed' 
  $S/configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}

  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make -j3
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################

  P2=$P

  # emacs_mini
  P=${P2}_mini
  rm -rf ${P}
  install -d -v $P/usr/bin
  install -d -v $P/usr/share/doc
  mv -v $P2/usr/bin/emacs-${vers} $P/usr/bin/emacs_mini-$vers
  ln -s -v emacs_mini-${vers} $P/usr/bin/emacs_mini
  mv -v $P2/usr/share/doc/$src $P/usr/share/doc/${pkgbase}_mini-$vers
  convert_links
  pushd $P
  /sbin/makepkg ../${pkgbase}_mini-${vers}${rc}-$arch-$build.$compress <<EOF
y
1
EOF
  popd

  # emacs_bin
  P=${P2}_bin
  rm -rf $P
  install -d -v $P/usr
  mv -v $P2/usr/bin $P/usr/bin
  rm -v $P/usr/bin/emacs
  mv -v $P2/usr/libexec $P/usr/libexec

  pushd $P
  /sbin/makepkg ../${pkgbase}_bin-${vers}${rc}-$arch-$build.$compress <<EOF
y
1
EOF
  popd

  # emacs_lib
  P=$P2
  chk_me=$(whoami | grep root)
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root:root $P/usr/share/emacs/${vers}/etc
      chown -R root:root $P/usr/share/emacs/${vers}/lisp
  fi
  cd $P
  /sbin/makepkg ../${pkgbase}_lib-${vers}${rc}-$arch-$build.$compress <<EOF
y
1
EOF

fi
