#!/bin/sh
##############################################################
pkgbase="librsvg"
vers="2.56.3"
url="https://download.gnome.org/sources/librsvg/${vers%.*}/librsvg-${vers}.tar.xz"
verify=""
digest="md5sum:8055142a6c9d0d21d42e40bc08dff814"
arch=`uname -m`
build=B1
src="librsvg-${vers}"
OPT_CONFIG="--disable-static --enable-shared"
DOCS="AUTHORS COPYING.LIB INSTALL NEWS README.md doc gtk-doc.make"
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=tzst
##############################################################

# librsvg-2.5x は Rust で書かれているので、ビルドするには
# curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh の手順で
# rust と cargo をインストールする必要がある。
# 一応、API/ABI は C と同じになっていて、作成された共有ライブラリは rust とは関係なく使える模様

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi


if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
    cd $S
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done

    # setup rust
    cd $W
    echo "We need rust toolchain. Now, setup rust"
    if [ -f /var/log/packages/rustc ]; then
        echo "Rustc pacakge is installed. We don't use it, so remove."
        sudo removepkg rustc
    fi

    if [ -f ~/.cargo/bin/rustc ]; then
        export PATH="$PATH:$HOME/.cargo/bin"
        if [ x"$rustver" = "x" ]; then
            rustup update
        else
            rustup default $rustver
        fi
    else
        wget -O rustup-init.sh https://sh.rustup.rs
        sh rustup-init.sh -y
        if [ x"$rustver" != "x" ]; then
            rustup default $rustver
        fi
    fi

    cd $B
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig
    export LDFLAGS='-Wl,--as-needed'
    export PATH="$HOME/.cargo/bin:$PATH"
    $S/configure --prefix=/usr --libdir=/usr/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man ${OPT_CONFIG}
    if [ $? != 0 ]; then
        echo "configure error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_build -eq 1 ] ; then
    cd $B
    export PATH="$HOME/.cargo/bin:$PATH"
    export LDFLAGS='-Wl,--as-needed'
    make -j3
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P
  mkdir -p $P/install
  cat <<EOF > $P/install/initpkg
gdk-pixbuf-query-loaders --update-cache
EOF

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
