#!/bin/sh
##############################################################
pkgbase='emacs'
vers='28.1'
url="https://ftp.gnu.org/gnu/${pkgbase}/${pkgbase}-${vers}.tar.xz"
verify="${url}.sig"
arch=`uname -m`
build=B4
src="${pkgbase}-${vers}"
OPT_CONFIG="
	--with-imagemagick
	--with-cairo
	--with-harfbuzz
	--with-xft
	--with-wide-int
	--with-x-toolkit=gtk3
	--with-modules"
DOCS='BUGS CONTRIBUTE COPYING ChangeLog ChangeLog.1 ChangeLog.2 ChangeLog.3 INSTALL INSTALL.REPO README'
patchfiles="emacs-28.1-add-compresstype.patch
0001-CVE-2022-48337.patch
0002-CVE-2022-48338.patch
0003-CVE-2022-48339.patch"
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
fi

if [ $opt_config -eq 1 ] ; then
  if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
  cd $S
  for patch in $patchfiles ; do
    if [ ! -f .${patch} ]; then
      patch -p1 < $W/$patch
      touch .${patch}
    fi
  done
  # if [ -f autogen.sh ] ; then
  #   sh ./autogen.sh
  # fi

  cd $B
  export PKG_CONFIG_PATH="/usr/lib/imagemagick6/pkgconfig:/usr/${libdir}/pkgconfig:/usr/share/pkgconfig"
  export LDFLAGS='-Wl,--as-needed'
  ac_cv_lib_gif_EGifPutExtensionLast=yes  \
				    $S/configure --prefix=/usr \
				    --sysconfdir=/etc \
				    --localstatedir=/var \
				    --mandir='${prefix}'/share/man ${OPT_CONFIG}

  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi
    
if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make -j3
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P

  mkdir -p $P/install
  rm -rf $P/usr/lib/systemd

  chk_root=`whoami | grep root`
  if [ "$chk_root.x" != ".x" ]; then
      chown -v -R root:root $P/usr/share/emacs/${vers}
  fi

  mkdir -p $P/install
  cat <<"EOF" > $P/install/initpkg
# remove overrided packages
for i in emacs_bin emacs_mini emacs_lib ; do
  if [ -f /var/log/packages/$i ]; then
    rm -f $i
  fi
done

EOF

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
