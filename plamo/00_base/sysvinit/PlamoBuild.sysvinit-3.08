#!/bin/sh
##############################################################
pkgbase="sysvinit"
vers="3.08"
url="https://github.com/slicer69/sysvinit/releases/download/${vers}/sysvinit-${vers}.tar.xz"
verify=""
digest=""
arch=`uname -m`
build=B2
src="sysvinit-${vers}"
OPT_CONFIG=""
DOCS="COPYING README doc"
patchfiles="0001-remove-pidof-and-logsave.patch"
# specifies files that are not in source archive and patchfiles
addfiles="rc.initpkg"
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi

if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  source copy build. patch apply in build dir
######################################################################
    if [ -d $B ] ; then rm -rf $B ; fi ;  cp -a $S $B  
    cd $B
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done
    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    echo "no need to config, proceed to build"
    opt_build=1

fi

if [ $opt_build -eq 1 ] ; then
    cd $B 
    export LDFLAGS='-Wl,--as-needed'
    make -C src
    if [ $? != 0 ]; then
        echo "build error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B

  export LDFLAGS='-Wl,--as-needed'
  make -C src install ROOT=$P

  mkdir -p $P/etc/rc.d
  install $W/rc.initpkg $P/etc/rc.d/


    cat << "EOF" > $P/etc/inittab
# /etc/inittab derived from LFS 20170713
# Begin /etc/inittab

id:3:initdefault:

si::sysinit:/etc/rc.d/init.d/rc S

l0:0:wait:/etc/rc.d/init.d/rc 0
l1:S1:wait:/etc/rc.d/init.d/rc 1
l2:2:wait:/etc/rc.d/init.d/rc 2
l3:3:wait:/etc/rc.d/init.d/rc 3
l4:4:wait:/etc/rc.d/init.d/rc 4
l5:5:wait:/etc/rc.d/init.d/rc 5
l6:6:wait:/etc/rc.d/init.d/rc 6

ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

su:S016:once:/sbin/sulogin

1:2345:respawn:/sbin/agetty --noclear tty1 9600
2:2345:respawn:/sbin/agetty tty2 9600
3:2345:respawn:/sbin/agetty tty3 9600
4:2345:respawn:/sbin/agetty tty4 9600
5:2345:respawn:/sbin/agetty tty5 9600
6:2345:respawn:/sbin/agetty tty6 9600

# End /etc/inittab
EOF

  cat <<- "EOF" > $P/sbin/link_rootdev.sh
	#!/bin/sh
	
	root="`cat /proc/cmdline | sed -n 's@.*\<root\>=\([^ ]*\).*@\1@p'`"
	if grep -q "^PARTUUID=" <<< $root ; then
	  # root=PARTUUID=<your partition UUID>
	  root_part=`blkid | tr -d '"' | grep $root | cut -d: -f1 | sed 's@/dev/@@'`
	else
	  if grep -q "^/dev/" <<< $root ; then
	    # root=/dev/sda1 (grub)
	    root_part=${root#/dev/}
	  else
	    # root=801 (lilo)
	    maj=$((`printf "%d" 0x$root` / 256))
	    min=$((`printf "%d" 0x$root` % 256))
	    root_part=`cat /proc/partitions \
	        | sed -n "/ $maj *$min /s@.* \([^ ]*\)@\1@p"`
	  fi
	fi
	ln -sf $root_part /dev/root

	if [ -f /etc/mtab ]; then 
	    rm -rf /etc/mtab
	fi
	ln -sf /proc/self/mounts /etc/mtab

	EOF
  chmod 755 $P/sbin/link_rootdev.sh

  mkdir -p $P/etc/rc.d/init.d
  cat <<"EOF" > $P/etc/rc.d/init.d/rc_initpkg
#!/bin/sh
########################################################################
# Begin scriptname: rc_initpkg
#
# Description : run rc.initpkg at boot time
#
# Authors     : KOJIMA
#
# Version     : Plamo 7.0
#
# Notes       :
#
########################################################################

### BEGIN INIT INFO
# Provides:            initpkg
# Required-Start:
# Should-Start:
# Required-Stop:
# Should-Stop:
# Default-Start: S
# Default-Stop:
# Short-Description: run /etc/rc.d/rc.initpkg at boot time
# Description:
# X-LFS-Provided-By:
### END INIT INFO

. /lib/lsb/init-functions

case "${1}" in
   start)
      if [ -x /etc/rc.d/rc.initpkg ]; then
          log_info_msg "run rc.initpkg..."	
          /etc/rc.d/rc.initpkg
	  evaluate_retval
      fi
      ;;
   *)
      echo "Usage: ${0} {start}"
      exit 1
      ;;
esac

exit 0

# End scriptname
EOF
  chmod +x $P/etc/rc.d/init.d/rc_initpkg
  mkdir -p $P/etc/rc.d/rcS.d
  ( cd $P/etc/rc.d/rcS.d ; ln -sf ../init.d/rc_initpkg S95initpkg )

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
