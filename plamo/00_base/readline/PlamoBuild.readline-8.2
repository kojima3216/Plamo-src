#!/bin/sh
##############################################################
pkgbase='readline'
basever='8.2'
patchlevel=1
if [ $patchlevel -ne 0 ]; then
    vers="$basever"."$patchlevel"
else
    vers=$basever
fi
url="http://ftp.jaist.ac.jp/pub/GNU/readline/readline-${basever}.tar.gz"
arch=`uname -m`
build=B1
src="${pkgbase}-${basever}"
OPT_CONFIG='--disable-static --enable-shared --with-curses'
DOCS='CHANGELOG COPYING INSTALL NEWS README history.c history.h'
patchfiles=""
genuine_patchfiles=''
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
# 
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi

# readline 純正の patchlevel 対応パッチについては $patchfiles 指定なしに取得し、
# Plamo 独自で当てるパッチだけ $patchfiles 管理する
if [ $patchlevel -gt 0 ]; then
    for (( _p=1; _p <= $((10#${patchlevel})); _p++ )); do
        patchfile=${url%/*}/readline-$basever-patches/readline${basever//.}-$(printf "%03d" $_p)
        genuine_patchfiles=($patchfile ${genuine_patchfiles[@]} )
        patchfiles_tmp=(${patchfiles_tmp[@]} ${patchfile##*/})
    done
    # Plamo 独自パッチと純正パッチのマージ
    patchfiles=(${patchfiles_tmp[@]} ${patchfiles[@]})
fi

if [ $opt_download -eq 1 ] ; then
    download_sources
    # readline 純正パッチの取得とverify
    for patchfile in ${genuine_patchfiles[@]}
    do
        if [ ! -f ${patchfile##*/} ]; then
            wget $patchfile
            wget $patchfile.sig
            gpg --verify ${patchfile##*/}.sig
            if [ $? -ne 0 ]; then
                echo "verifying is failed."
                exit 1
            fi
        fi
    done
fi

if [ $opt_config -eq 1 ] ; then
    if [ -d $B ] ; then rm -rf $B ; fi ; mkdir -p $B 
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
    cd $S
    for patch in ${patchfiles[@]} ; do
        if [ ! -f .${patch} ]; then
            patch -p0 < $W/$patch
            touch .${patch}
        fi
    done

    cd $B
    # if [ -f $S/autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi
    export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
    export LDFLAGS='-Wl,--as-needed' 
    $S/configure --prefix=/usr \
                 --sysconfdir=/etc \
                 --localstatedir=/var \
                 --mandir='${prefix}'/share/man \
                 --docdir='${prefix}'/share/doc/${pkgbase}-${basever} \
                 ${OPT_CONFIG[$i]}
    
    if [ $? != 0 ]; then
	echo "configure error. $0 script stop"
	exit 255
    fi
fi
    
if [ $opt_build -eq 1 ] ; then
    cd $B
    export LDFLAGS='-Wl,--as-needed'
    make -j3 SHLIB_LIBS=-lncursesw
    if [ $? != 0 ]; then
	echo "build error. $0 script stop"
	exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P
  install -d $P/${libdir}
  mv -v $P/usr/${libdir}/lib{readline,history}.so.* $P/${libdir}/
  ln -sfv /${libdir}/$(readlink $P/usr/${libdir}/libreadline.so) $P/usr/${libdir}/libreadline.so
  ln -sfv /${libdir}/$(readlink $P/usr/${libdir}/libhistory.so) $P/usr/${libdir}/libhistory.so

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  if [ $patchlevel -ne 0 ]; then
      ( cd $P/usr/share/doc ; mv $pkgbase-$basever $pkgbase-$vers )
  fi

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
