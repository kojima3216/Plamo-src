#!/bin/sh
##############################################################
pkgbase="wasi_libc++"
vers="13.0.1"
urls=("https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/llvm-13.0.1.src.tar.xz"
      "https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/libcxx-13.0.1.src.tar.xz"
      "https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/libcxxabi-13.0.1.src.tar.xz")
url=
verifies=("https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/llvm-13.0.1.src.tar.xz.sig"
          "https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/libcxx-13.0.1.src.tar.xz.sig"
          "https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/libcxxabi-13.0.1.src.tar.xz.sig")
verify=
digest=""
arch=`uname -m`
build=B1
src=
OPT_CONFIG=
DOCS="CODE_OWNERS.TXT CREDITS.TXT LICENSE.TXT README.txt RELEASE_TESTERS.TXT docs"
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=tzst
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    for i in $(seq 0 ${#urls[@]})
    do
        url=${urls[$i]}; verify=${verifies[$i]}
        download_sources
    done
fi

if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    cd $W
    mkdir -p cmake/Platform
    cp $W/WASI.cmake cmake/Platform/

    mv libcxx-${vers}.src libcxx
    mv libcxxabi-${vers}.src libcxxabi
    mv llvm-${vers}.src llvm

    echo "config libcxx"
    cmake -B build-libcxx -G Ninja \
	  -DCMAKE_BUILD_TYPE=Release \
	  -DCMAKE_C_COMPILER_WORKS=ON \
	  -DCMAKE_CXX_COMPILER_WORKS=ON \
	  -DCMAKE_MODULE_PATH="${W}"/cmake \
	  -DCMAKE_TOOLCHAIN_FILE="${W}"/wasi-toolchain.cmake \
	  -DCMAKE_STAGING_PREFIX=/usr/share/wasi-sysroot \
	  -DLIBCXX_ENABLE_EXCEPTIONS:BOOL=OFF \
	  -DLIBCXX_ENABLE_SHARED:BOOL=OFF \
	  -DLIBCXX_ENABLE_THREADS:BOOL=OFF \
	  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
	  -DLIBCXX_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
	  -DLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
	  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=OFF \
	  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
	  -DLIBCXX_ENABLE_FILESYSTEM:BOOL=OFF \
	  -DLIBCXX_CXX_ABI=libcxxabi \
	  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=libcxxabi/include \
	  -DLIBCXX_HAS_MUSL_LIBC:BOOL=ON \
	  -DLIBCXX_ABI_VERSION=2 \
	  -DWASI_SDK_PREFIX=/usr \
	  -DCMAKE_C_FLAGS="-fno-exceptions --sysroot=/usr/share/wasi-sysroot" \
	  -DCMAKE_CXX_FLAGS="-fno-exceptions --sysroot=/usr/share/wasi-sysroot" \
	  -DLIBCXX_LIBDIR_SUFFIX=/wasm32-wasi \
	  libcxx

    echo "config libcxxabi"
    cmake -B build-libcxxabi -G Ninja \
	  -DCMAKE_BUILD_TYPE=Release \
	  -DCMAKE_C_COMPILER_WORKS=ON \
	  -DCMAKE_CXX_COMPILER_WORKS=ON \
	  -DCMAKE_MODULE_PATH="${W}"/cmake \
	  -DCMAKE_TOOLCHAIN_FILE="${W}"/wasi-toolchain.cmake \
	  -DCMAKE_STAGING_PREFIX=/usr/share/wasi-sysroot \
	  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=OFF \
	  -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF \
	  -DLIBCXXABI_ENABLE_THREADS:BOOL=OFF \
	  -DLIBCXXABI_HAS_PTHREAD_API:BOOL=OFF \
	  -DLIBCXXABI_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
	  -DLIBCXXABI_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
	  -DLIBCXXABI_HAS_WIN32_THREAD_API:BOOL=OFF \
	  -DLIBCXXABI_SILENT_TERMINATE:BOOL=ON \
	  -DLIBCXXABI_ENABLE_PIC:BOOL=OFF \
	  -DUNIX:BOOL=ON \
	  -DCXX_SUPPORTS_CXX11=ON \
	  -DLIBCXXABI_LIBCXX_PATH=libcxx \
	  -DLIBCXXABI_LIBCXX_INCLUDES="${W}"/build-libcxx/include/c++/v1 \
	  -DWASI_SDK_PREFIX=/usr \
	  -DCMAKE_C_FLAGS="-fno-exceptions --sysroot=/usr/share/wasi-sysroot" \
	  -DCMAKE_CXX_FLAGS="-fno-exceptions --sysroot=/usr/share/wasi-sysroot" \
	  -DLIBCXXABI_LIBDIR_SUFFIX=/wasm32-wasi \
	  libcxxabi
fi

if [ $opt_build -eq 1 ] ; then
    cd $W
    cmake --build build-libcxx -v
    if [ $? != 0 ]; then
        echo "build-libcxx error. $0 script stop"
        exit 255
    fi
    cmake --build build-libcxxabi -v
    if [ $? != 0 ]; then
        echo "build-libcxxabi error. $0 script stop"
        exit 255
    fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $W

  DESTDIR=$P cmake --install build-libcxx -v
  DESTDIR=$P cmake --install build-libcxxabi -v

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
